
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000c8  008000c8  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194c  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008db  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  00002c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e92  00000000  00000000  00003ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  8a:	0c 94 af 03 	jmp	0x75e	; 0x75e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidinit>:
int ADC_read() {
	while(!(ADCSRA & (1<<ADIF)));
	int data = ADCL;
	data |= (ADCH<<8);
	return data;
}
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	95 b9       	out	0x05, r25	; 5
  a6:	84 b9       	out	0x04, r24	; 4
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	95 b1       	in	r25, 0x05	; 5
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	84 b9       	out	0x04, r24	; 4
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	86 b9       	out	0x06, r24	; 6
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	86 b9       	out	0x06, r24	; 6
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	86 b9       	out	0x06, r24	; 6
  e2:	08 95       	ret

000000e4 <ADC_u16ReadConversion>:
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	86 b9       	out	0x06, r24	; 6
  ea:	34 9b       	sbis	0x06, 4	; 6
  ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_u16ReadConversion+0x6>
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	86 b9       	out	0x06, r24	; 6
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	08 95       	ret

000000fa <ADC_channel>:
  fa:	17 b8       	out	0x07, r1	; 7
  fc:	97 b1       	in	r25, 0x07	; 7
  fe:	89 2b       	or	r24, r25
 100:	87 b9       	out	0x07, r24	; 7
 102:	08 95       	ret

00000104 <ADC_voidEnable>:


void  ADC_voidEnable(void)
{
	SET_BIT(ADCSRA,7);	
 104:	86 b1       	in	r24, 0x06	; 6
 106:	80 68       	ori	r24, 0x80	; 128
 108:	86 b9       	out	0x06, r24	; 6
 10a:	08 95       	ret

0000010c <DIO_voidSetPinValue>:
		}
	}
	
	else{	/*		Do Nothing		*/	}
	return Local_Val;
}
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_voidSetPinValue+0x6>
 110:	72 c0       	rjmp	.+228    	; 0x1f6 <DIO_voidSetPinValue+0xea>
 112:	68 30       	cpi	r22, 0x08	; 8
 114:	08 f0       	brcs	.+2      	; 0x118 <DIO_voidSetPinValue+0xc>
 116:	6f c0       	rjmp	.+222    	; 0x1f6 <DIO_voidSetPinValue+0xea>
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	a1 f5       	brne	.+104    	; 0x184 <DIO_voidSetPinValue+0x78>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	89 f0       	breq	.+34     	; 0x142 <DIO_voidSetPinValue+0x36>
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_voidSetPinValue+0x20>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	c9 f0       	breq	.+50     	; 0x158 <DIO_voidSetPinValue+0x4c>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	11 f1       	breq	.+68     	; 0x16e <DIO_voidSetPinValue+0x62>
 12a:	08 95       	ret
 12c:	2b b3       	in	r18, 0x1b	; 27
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinValue+0x2c>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinValue+0x28>
 13c:	82 2b       	or	r24, r18
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	08 95       	ret
 142:	28 b3       	in	r18, 0x18	; 24
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinValue+0x42>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinValue+0x3e>
 152:	82 2b       	or	r24, r18
 154:	88 bb       	out	0x18, r24	; 24
 156:	08 95       	ret
 158:	25 b3       	in	r18, 0x15	; 21
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinValue+0x58>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinValue+0x54>
 168:	82 2b       	or	r24, r18
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	08 95       	ret
 16e:	22 b3       	in	r18, 0x12	; 18
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPinValue+0x6e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPinValue+0x6a>
 17e:	82 2b       	or	r24, r18
 180:	82 bb       	out	0x12, r24	; 18
 182:	08 95       	ret
 184:	41 11       	cpse	r20, r1
 186:	37 c0       	rjmp	.+110    	; 0x1f6 <DIO_voidSetPinValue+0xea>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 f0       	breq	.+36     	; 0x1b0 <DIO_voidSetPinValue+0xa4>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_voidSetPinValue+0x8c>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	d9 f0       	breq	.+54     	; 0x1c8 <DIO_voidSetPinValue+0xbc>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	29 f1       	breq	.+74     	; 0x1e0 <DIO_voidSetPinValue+0xd4>
 196:	08 95       	ret
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinValue+0x98>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinValue+0x94>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinValue+0xb0>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinValue+0xac>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
 1c8:	25 b3       	in	r18, 0x15	; 21
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0xc8>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0xc4>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_voidSetPinValue+0xe0>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_voidSetPinValue+0xdc>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPortDirection>:
/*			DIO_voidSetPortDirection(PORTB , 0x0F)		0b0000 1111;	*/
/*			DIO_voidSetPortDirection(PORTB , OUTPUT)		0b1111 1111;*/
void	DIO_voidSetPortDirection(u8 PORTID , u8 Direction)
{
	/*				Range Check										*/
	if(  PORTID < 4  )
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	b8 f5       	brcc	.+110    	; 0x26a <DIO_voidSetPortDirection+0x72>
	{
		if( Direction == OUTPUT )
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	a1 f4       	brne	.+40     	; 0x228 <DIO_voidSetPortDirection+0x30>
		{
			switch(PORTID)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	49 f0       	breq	.+18     	; 0x216 <DIO_voidSetPortDirection+0x1e>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_voidSetPortDirection+0x18>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	49 f0       	breq	.+18     	; 0x21c <DIO_voidSetPortDirection+0x24>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	51 f0       	breq	.+20     	; 0x222 <DIO_voidSetPortDirection+0x2a>
 20e:	08 95       	ret
			{
				case	PORTA	:	DDRA_REG	=	0xFF;	break;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	8a bb       	out	0x1a, r24	; 26
 214:	08 95       	ret
				case	PORTB	:	DDRB_REG	=	0xFF;	break;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	87 bb       	out	0x17, r24	; 23
 21a:	08 95       	ret
				case	PORTC	:	DDRC_REG	=	0xFF;	break;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	84 bb       	out	0x14, r24	; 20
 220:	08 95       	ret
				case	PORTD	:	DDRD_REG	=	0xFF;	break;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	81 bb       	out	0x11, r24	; 17
 226:	08 95       	ret
			}
		}
		else if(Direction == INPUT)
 228:	61 11       	cpse	r22, r1
 22a:	10 c0       	rjmp	.+32     	; 0x24c <DIO_voidSetPortDirection+0x54>
		{
			switch(PORTID)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	41 f0       	breq	.+16     	; 0x240 <DIO_voidSetPortDirection+0x48>
 230:	28 f0       	brcs	.+10     	; 0x23c <DIO_voidSetPortDirection+0x44>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	39 f0       	breq	.+14     	; 0x244 <DIO_voidSetPortDirection+0x4c>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	39 f0       	breq	.+14     	; 0x248 <DIO_voidSetPortDirection+0x50>
 23a:	08 95       	ret
			{
				case	PORTA	:	DDRA_REG	=	0x00;	break;
 23c:	1a ba       	out	0x1a, r1	; 26
 23e:	08 95       	ret
				case	PORTB	:	DDRB_REG	=	0x00;	break;
 240:	17 ba       	out	0x17, r1	; 23
 242:	08 95       	ret
				case	PORTC	:	DDRC_REG	=	0x00;	break;
 244:	14 ba       	out	0x14, r1	; 20
 246:	08 95       	ret
				case	PORTD	:	DDRD_REG	=	0x00;	break;
 248:	11 ba       	out	0x11, r1	; 17
 24a:	08 95       	ret
			}			
		}
		else
		{
			switch(PORTID)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	41 f0       	breq	.+16     	; 0x260 <DIO_voidSetPortDirection+0x68>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_voidSetPortDirection+0x64>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	39 f0       	breq	.+14     	; 0x264 <DIO_voidSetPortDirection+0x6c>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	39 f0       	breq	.+14     	; 0x268 <DIO_voidSetPortDirection+0x70>
 25a:	08 95       	ret
			{
				case	PORTA	:	DDRA_REG	=	Direction;	break;
 25c:	6a bb       	out	0x1a, r22	; 26
 25e:	08 95       	ret
				case	PORTB	:	DDRB_REG	=	Direction;	break;
 260:	67 bb       	out	0x17, r22	; 23
 262:	08 95       	ret
				case	PORTC	:	DDRC_REG	=	Direction;	break;
 264:	64 bb       	out	0x14, r22	; 20
 266:	08 95       	ret
				case	PORTD	:	DDRD_REG	=	Direction;	break;
 268:	61 bb       	out	0x11, r22	; 17
 26a:	08 95       	ret

0000026c <DIO_voidSetPortValue>:
}
/*			Determine (Output) High or Low for one PORT(8 PINS)	(1/0)*/
void	DIO_voidSetPortValue(u8 PORTID , u8 Value)
{
	/*				Range Check										*/
	if(  PORTID < 4  )
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	b8 f5       	brcc	.+110    	; 0x2de <DIO_voidSetPortValue+0x72>
	{
		if( Value == HIGH )
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	a1 f4       	brne	.+40     	; 0x29c <DIO_voidSetPortValue+0x30>
		{
			switch(PORTID)
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	49 f0       	breq	.+18     	; 0x28a <DIO_voidSetPortValue+0x1e>
 278:	28 f0       	brcs	.+10     	; 0x284 <DIO_voidSetPortValue+0x18>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	49 f0       	breq	.+18     	; 0x290 <DIO_voidSetPortValue+0x24>
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	51 f0       	breq	.+20     	; 0x296 <DIO_voidSetPortValue+0x2a>
 282:	08 95       	ret
			{
				case	PORTA	:	PORTA_REG	=	0xFF;	break;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	8b bb       	out	0x1b, r24	; 27
 288:	08 95       	ret
				case	PORTB	:	PORTB_REG	=	0xFF;	break;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	08 95       	ret
				case	PORTC	:	PORTC_REG	=	0xFF;	break;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	85 bb       	out	0x15, r24	; 21
 294:	08 95       	ret
				case	PORTD	:	PORTD_REG	=	0xFF;	break;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	82 bb       	out	0x12, r24	; 18
 29a:	08 95       	ret
			}
		}
		else if(Value == LOW)
 29c:	61 11       	cpse	r22, r1
 29e:	10 c0       	rjmp	.+32     	; 0x2c0 <DIO_voidSetPortValue+0x54>
		{
			switch(PORTID)
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	41 f0       	breq	.+16     	; 0x2b4 <DIO_voidSetPortValue+0x48>
 2a4:	28 f0       	brcs	.+10     	; 0x2b0 <DIO_voidSetPortValue+0x44>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <DIO_voidSetPortValue+0x4c>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	39 f0       	breq	.+14     	; 0x2bc <DIO_voidSetPortValue+0x50>
 2ae:	08 95       	ret
			{
				case	PORTA	:	PORTA_REG	=	0x00;	break;
 2b0:	1b ba       	out	0x1b, r1	; 27
 2b2:	08 95       	ret
				case	PORTB	:	PORTB_REG	=	0x00;	break;
 2b4:	18 ba       	out	0x18, r1	; 24
 2b6:	08 95       	ret
				case	PORTC	:	PORTC_REG	=	0x00;	break;
 2b8:	15 ba       	out	0x15, r1	; 21
 2ba:	08 95       	ret
				case	PORTD	:	PORTD_REG	=	0x00;	break;
 2bc:	12 ba       	out	0x12, r1	; 18
 2be:	08 95       	ret
			}			
		}
		else
		{
			switch(PORTID)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <DIO_voidSetPortValue+0x68>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_voidSetPortValue+0x64>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <DIO_voidSetPortValue+0x6c>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	39 f0       	breq	.+14     	; 0x2dc <DIO_voidSetPortValue+0x70>
 2ce:	08 95       	ret
			{
				case	PORTA	:	PORTA_REG	=	Value;	break;
 2d0:	6b bb       	out	0x1b, r22	; 27
 2d2:	08 95       	ret
				case	PORTB	:	PORTB_REG	=	Value;	break;
 2d4:	68 bb       	out	0x18, r22	; 24
 2d6:	08 95       	ret
				case	PORTC	:	PORTC_REG	=	Value;	break;
 2d8:	65 bb       	out	0x15, r22	; 21
 2da:	08 95       	ret
				case	PORTD	:	PORTD_REG	=	Value;	break;
 2dc:	62 bb       	out	0x12, r22	; 18
 2de:	08 95       	ret

000002e0 <LCD_voidWriteChar8Bit>:
	LCD_voidSendCMD8Bit(0b00000110);
	
	
}
void	LCD_voidWriteChar8Bit(u8	Data)
{
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
	/*				RS = 1 to write Data					*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS,HIGH);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
	/*				RW = 0 To write							*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
	/*				En = Latch								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_voidWriteChar8Bit+0x26>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_voidWriteChar8Bit+0x2c>
 30c:	00 00       	nop
	_delay_ms(5);
		/*				Send 8 Bit Data							*/
	DIO_voidSetPortValue(LCD_DATA_PORT,Data);
 30e:	6c 2f       	mov	r22, r28
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPortValue>
	/*				En = Latch								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
 320:	8f e1       	ldi	r24, 0x1F	; 31
 322:	9e e4       	ldi	r25, 0x4E	; 78
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_voidWriteChar8Bit+0x44>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_voidWriteChar8Bit+0x4a>
 32a:	00 00       	nop
	_delay_ms(5);	
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <LCD_voidSendCMD8Bit>:
void	LCD_voidSendCMD8Bit(u8	CMD)
{
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
	/*				RS = 0 to write CMD						*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS,LOW);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
	/*				RW = 0 To write							*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);	
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
		/*				En = Latch								*/
		DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,HIGH);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
 352:	8f e1       	ldi	r24, 0x1F	; 31
 354:	9e e4       	ldi	r25, 0x4E	; 78
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_voidSendCMD8Bit+0x26>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_voidSendCMD8Bit+0x2c>
 35c:	00 00       	nop
		_delay_ms(5);
		/*				Send 8 Bit CMD							*/
    DIO_voidSetPortValue(LCD_DATA_PORT,CMD);
 35e:	6c 2f       	mov	r22, r28
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPortValue>
	/*				En = Latch								*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_voidSetPinValue>
 370:	8f e1       	ldi	r24, 0x1F	; 31
 372:	9e e4       	ldi	r25, 0x4E	; 78
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_voidSendCMD8Bit+0x44>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_voidSendCMD8Bit+0x4a>
 37a:	00 00       	nop
	_delay_ms(5);	
}
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <LCD_voidInit8Bit>:
 380:	2f e7       	ldi	r18, 0x7F	; 127
 382:	85 eb       	ldi	r24, 0xB5	; 181
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <LCD_voidInit8Bit+0x6>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_voidInit8Bit+0x10>
 390:	00 00       	nop
void	LCD_voidInit8Bit(void)
{
	/*		Delay 35 msec 	*/
	_delay_ms(35);
	/*		Function Set	font = 5*7	, N = 2 Lines of Display	*/
	LCD_voidSendCMD8Bit(0b00111000);
 392:	88 e3       	ldi	r24, 0x38	; 56
 394:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
 398:	8f e9       	ldi	r24, 0x9F	; 159
 39a:	9f e0       	ldi	r25, 0x0F	; 15
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_voidInit8Bit+0x1c>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_voidInit8Bit+0x22>
 3a2:	00 00       	nop
	_delay_ms(1);
	/*		Function Set	D = Display ON	, Cursor Off			*/
	LCD_voidSendCMD8Bit(0b00001100);
 3a4:	8c e0       	ldi	r24, 0x0C	; 12
 3a6:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
 3aa:	8f e9       	ldi	r24, 0x9F	; 159
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_voidInit8Bit+0x2e>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_voidInit8Bit+0x34>
 3b4:	00 00       	nop
	_delay_ms(1);
	/*		Clear Display											*/
	LCD_voidSendCMD8Bit(0b00000001);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
 3bc:	8f e3       	ldi	r24, 0x3F	; 63
 3be:	9f e1       	ldi	r25, 0x1F	; 31
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_voidInit8Bit+0x40>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_voidInit8Bit+0x46>
 3c6:	00 00       	nop
	_delay_ms(2);
	/*		Entery Mode	Cursor Increases and shift off	 			*/
	LCD_voidSendCMD8Bit(0b00000110);
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
 3ce:	08 95       	ret

000003d0 <LCD_voidWriteString>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN,LOW);
	_delay_ms(5);	
}

void    LCD_voidWriteString(u8 *str)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
	if (str != 0)
 3d6:	89 2b       	or	r24, r25
 3d8:	21 f4       	brne	.+8      	; 0x3e2 <LCD_voidWriteString+0x12>
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <LCD_voidWriteString+0x18>
	{
		while (*str != '\0')
		{
			LCD_voidWriteChar8Bit(*str);
 3dc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidWriteChar8Bit>
			str++;
 3e0:	21 96       	adiw	r28, 0x01	; 1

void    LCD_voidWriteString(u8 *str)
{
	if (str != 0)
	{
		while (*str != '\0')
 3e2:	88 81       	ld	r24, Y
 3e4:	81 11       	cpse	r24, r1
 3e6:	fa cf       	rjmp	.-12     	; 0x3dc <LCD_voidWriteString+0xc>
			LCD_voidWriteChar8Bit(*str);
			str++;
		}
		
	}
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <main>:



int main(void)
{
	  ADC_voidinit();
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidinit>
	ADC_voidEnable();
 3f2:	0e 94 82 00 	call	0x104	; 0x104 <ADC_voidEnable>
	ADC_u16ReadConversion(1);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_u16ReadConversion>
DIO_voidSetPortDirection(PORTD,OUTPUT);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPortDirection>
DIO_voidSetPortDirection(PORTC,OUTPUT);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPortDirection>
DIO_voidSetPortDirection(PORTA,INPUT);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPortDirection>

	LCD_voidInit8Bit();
 414:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidInit8Bit>
	
  
    while (1) 
    {
			
			READ_sensor();
 418:	0e 94 0f 02 	call	0x41e	; 0x41e <READ_sensor>
 41c:	fd cf       	rjmp	.-6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>

0000041e <READ_sensor>:
//u16Analog_Val<1200 ==> flat   0-24%
//2500>u16Analog_Val>1200 ==> half bended  25-49%
//u16Analog_Val>2500  ==> Full bended  50-100%

void READ_sensor(void)
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
	for (int i = 0 ; i<5 ; i++)
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	22 c0       	rjmp	.+68     	; 0x46c <READ_sensor+0x4e>
	{
		 ADC_channel(i);
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_channel>
		 u16Conversion_Val = ADC_u16ReadConversion(i);
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_u16ReadConversion>
 434:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__data_end+0x1>
 438:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end>
		 u16Analog_Val[i]=((u16Conversion_Val*5000UL)/1024);
 43c:	28 e8       	ldi	r18, 0x88	; 136
 43e:	33 e1       	ldi	r19, 0x13	; 19
 440:	dc 01       	movw	r26, r24
 442:	0e 94 99 03 	call	0x732	; 0x732 <__usmulhisi3>
 446:	dc 01       	movw	r26, r24
 448:	cb 01       	movw	r24, r22
 44a:	07 2e       	mov	r0, r23
 44c:	7a e0       	ldi	r23, 0x0A	; 10
 44e:	b6 95       	lsr	r27
 450:	a7 95       	ror	r26
 452:	97 95       	ror	r25
 454:	87 95       	ror	r24
 456:	7a 95       	dec	r23
 458:	d1 f7       	brne	.-12     	; 0x44e <READ_sensor+0x30>
 45a:	70 2d       	mov	r23, r0
 45c:	fe 01       	movw	r30, r28
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	e6 53       	subi	r30, 0x36	; 54
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	91 83       	std	Z+1, r25	; 0x01
 468:	80 83       	st	Z, r24
//2500>u16Analog_Val>1200 ==> half bended  25-49%
//u16Analog_Val>2500  ==> Full bended  50-100%

void READ_sensor(void)
{
	for (int i = 0 ; i<5 ; i++)
 46a:	21 96       	adiw	r28, 0x01	; 1
 46c:	c5 30       	cpi	r28, 0x05	; 5
 46e:	d1 05       	cpc	r29, r1
 470:	dc f2       	brlt	.-74     	; 0x428 <READ_sensor+0xa>
		 u16Analog_Val[i]=((u16Conversion_Val*5000UL)/1024);
	}
	
	
	//ROCK AND ROLL
	if ((u16Analog_Val[0]>2500)&&(u16Analog_Val[1]<1200)&&(u16Analog_Val[2]>2500)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]<1200))
 472:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 476:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 47a:	85 3c       	cpi	r24, 0xC5	; 197
 47c:	99 40       	sbci	r25, 0x09	; 9
 47e:	44 f1       	brlt	.+80     	; 0x4d0 <READ_sensor+0xb2>
 480:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 484:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 488:	80 3b       	cpi	r24, 0xB0	; 176
 48a:	94 40       	sbci	r25, 0x04	; 4
 48c:	0c f5       	brge	.+66     	; 0x4d0 <READ_sensor+0xb2>
 48e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 492:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 496:	85 3c       	cpi	r24, 0xC5	; 197
 498:	99 40       	sbci	r25, 0x09	; 9
 49a:	d4 f0       	brlt	.+52     	; 0x4d0 <READ_sensor+0xb2>
 49c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 4a0:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 4a4:	85 3c       	cpi	r24, 0xC5	; 197
 4a6:	99 40       	sbci	r25, 0x09	; 9
 4a8:	9c f0       	brlt	.+38     	; 0x4d0 <READ_sensor+0xb2>
 4aa:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 4ae:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 4b2:	80 3b       	cpi	r24, 0xB0	; 176
 4b4:	94 40       	sbci	r25, 0x04	; 4
 4b6:	64 f4       	brge	.+24     	; 0x4d0 <READ_sensor+0xb2>
	{
		LCD_voidSendCMD8Bit(0X80);
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("Rock And Roll!");
 4c0:	80 e6       	ldi	r24, 0x60	; 96
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		
	}
	
	//I LOVE YOU
	if ((u16Analog_Val[0]<1200)&&(u16Analog_Val[1]<1200)&&(u16Analog_Val[2]>2500)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]<1200))
 4d0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 4d4:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 4d8:	80 3b       	cpi	r24, 0xB0	; 176
 4da:	94 40       	sbci	r25, 0x04	; 4
 4dc:	44 f5       	brge	.+80     	; 0x52e <READ_sensor+0x110>
 4de:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 4e2:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 4e6:	80 3b       	cpi	r24, 0xB0	; 176
 4e8:	94 40       	sbci	r25, 0x04	; 4
 4ea:	0c f5       	brge	.+66     	; 0x52e <READ_sensor+0x110>
 4ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 4f0:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 4f4:	85 3c       	cpi	r24, 0xC5	; 197
 4f6:	99 40       	sbci	r25, 0x09	; 9
 4f8:	d4 f0       	brlt	.+52     	; 0x52e <READ_sensor+0x110>
 4fa:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 4fe:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 502:	85 3c       	cpi	r24, 0xC5	; 197
 504:	99 40       	sbci	r25, 0x09	; 9
 506:	9c f0       	brlt	.+38     	; 0x52e <READ_sensor+0x110>
 508:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 50c:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 510:	80 3b       	cpi	r24, 0xB0	; 176
 512:	94 40       	sbci	r25, 0x04	; 4
 514:	64 f4       	brge	.+24     	; 0x52e <READ_sensor+0x110>
	{
		LCD_voidSendCMD8Bit(0X85);
 516:	85 e8       	ldi	r24, 0x85	; 133
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("I LOVE YOU!");
 51e:	8f e6       	ldi	r24, 0x6F	; 111
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		
	}

    //I REALLY LOVE YOU
	if ((u16Analog_Val[0]<1200)&&(u16Analog_Val[1]<1200)&&(u16Analog_Val[2]<1200)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]<1200))
 52e:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 532:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 536:	80 3b       	cpi	r24, 0xB0	; 176
 538:	94 40       	sbci	r25, 0x04	; 4
 53a:	84 f5       	brge	.+96     	; 0x59c <READ_sensor+0x17e>
 53c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 540:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 544:	80 3b       	cpi	r24, 0xB0	; 176
 546:	94 40       	sbci	r25, 0x04	; 4
 548:	4c f5       	brge	.+82     	; 0x59c <READ_sensor+0x17e>
 54a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 54e:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 552:	80 3b       	cpi	r24, 0xB0	; 176
 554:	94 40       	sbci	r25, 0x04	; 4
 556:	14 f5       	brge	.+68     	; 0x59c <READ_sensor+0x17e>
 558:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 55c:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 560:	85 3c       	cpi	r24, 0xC5	; 197
 562:	99 40       	sbci	r25, 0x09	; 9
 564:	dc f0       	brlt	.+54     	; 0x59c <READ_sensor+0x17e>
 566:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 56a:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 56e:	80 3b       	cpi	r24, 0xB0	; 176
 570:	94 40       	sbci	r25, 0x04	; 4
 572:	a4 f4       	brge	.+40     	; 0x59c <READ_sensor+0x17e>
	{
		LCD_voidSendCMD8Bit(0X80);
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("I REALLY LOVE");
 57c:	8b e7       	ldi	r24, 0x7B	; 123
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		LCD_voidSendCMD8Bit(0XC5);
 584:	85 ec       	ldi	r24, 0xC5	; 197
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString(" YOU !");
 58c:	85 e9       	ldi	r24, 0x95	; 149
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		
	}

    //I AM WATCHING YOU
	if ((u16Analog_Val[0]>2500)&&(u16Analog_Val[1]>1200 & u16Analog_Val[1]<2500)&&(u16Analog_Val[2]>1200 & u16Analog_Val[2]<2500)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]>2500))
 59c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 5a0:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 5a4:	85 3c       	cpi	r24, 0xC5	; 197
 5a6:	99 40       	sbci	r25, 0x09	; 9
 5a8:	64 f1       	brlt	.+88     	; 0x602 <READ_sensor+0x1e4>
 5aa:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 5ae:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 5b2:	81 5b       	subi	r24, 0xB1	; 177
 5b4:	94 40       	sbci	r25, 0x04	; 4
 5b6:	83 31       	cpi	r24, 0x13	; 19
 5b8:	95 40       	sbci	r25, 0x05	; 5
 5ba:	18 f5       	brcc	.+70     	; 0x602 <READ_sensor+0x1e4>
 5bc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 5c0:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 5c4:	81 5b       	subi	r24, 0xB1	; 177
 5c6:	94 40       	sbci	r25, 0x04	; 4
 5c8:	83 31       	cpi	r24, 0x13	; 19
 5ca:	95 40       	sbci	r25, 0x05	; 5
 5cc:	d0 f4       	brcc	.+52     	; 0x602 <READ_sensor+0x1e4>
 5ce:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 5d2:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 5d6:	85 3c       	cpi	r24, 0xC5	; 197
 5d8:	99 40       	sbci	r25, 0x09	; 9
 5da:	9c f0       	brlt	.+38     	; 0x602 <READ_sensor+0x1e4>
 5dc:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 5e0:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 5e4:	85 3c       	cpi	r24, 0xC5	; 197
 5e6:	99 40       	sbci	r25, 0x09	; 9
 5e8:	64 f0       	brlt	.+24     	; 0x602 <READ_sensor+0x1e4>
	{
		LCD_voidSendCMD8Bit(0X80);
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("I'M WATCHING YOU !");
 5f2:	89 e8       	ldi	r24, 0x89	; 137
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		
	}	
	
	//HEY YOU!
	if ((u16Analog_Val[0]>2500)&&(u16Analog_Val[1]<1200)&&(u16Analog_Val[2]>2500)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]>2500))
 602:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 606:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 60a:	85 3c       	cpi	r24, 0xC5	; 197
 60c:	99 40       	sbci	r25, 0x09	; 9
 60e:	44 f1       	brlt	.+80     	; 0x660 <READ_sensor+0x242>
 610:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 614:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 618:	80 3b       	cpi	r24, 0xB0	; 176
 61a:	94 40       	sbci	r25, 0x04	; 4
 61c:	0c f5       	brge	.+66     	; 0x660 <READ_sensor+0x242>
 61e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 622:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 626:	85 3c       	cpi	r24, 0xC5	; 197
 628:	99 40       	sbci	r25, 0x09	; 9
 62a:	d4 f0       	brlt	.+52     	; 0x660 <READ_sensor+0x242>
 62c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 630:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 634:	85 3c       	cpi	r24, 0xC5	; 197
 636:	99 40       	sbci	r25, 0x09	; 9
 638:	9c f0       	brlt	.+38     	; 0x660 <READ_sensor+0x242>
 63a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 63e:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 642:	85 3c       	cpi	r24, 0xC5	; 197
 644:	99 40       	sbci	r25, 0x09	; 9
 646:	64 f0       	brlt	.+24     	; 0x660 <READ_sensor+0x242>
	{
		LCD_voidSendCMD8Bit(0X85);
 648:	85 e8       	ldi	r24, 0x85	; 133
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("HEY YOU!");
 650:	8c e9       	ldi	r24, 0x9C	; 156
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		LCD_voidSendCMD8Bit(0X01);
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
	}
		
	//GOOD JOB!
	if ((u16Analog_Val[0]<1200)&&(u16Analog_Val[1]>2500)&&(u16Analog_Val[2]>2500)&&(u16Analog_Val[3]>2500)&&(u16Analog_Val[4]>2500))
 660:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 664:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 668:	80 3b       	cpi	r24, 0xB0	; 176
 66a:	94 40       	sbci	r25, 0x04	; 4
 66c:	44 f5       	brge	.+80     	; 0x6be <READ_sensor+0x2a0>
 66e:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 672:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 676:	85 3c       	cpi	r24, 0xC5	; 197
 678:	99 40       	sbci	r25, 0x09	; 9
 67a:	0c f1       	brlt	.+66     	; 0x6be <READ_sensor+0x2a0>
 67c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 680:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 684:	85 3c       	cpi	r24, 0xC5	; 197
 686:	99 40       	sbci	r25, 0x09	; 9
 688:	d4 f0       	brlt	.+52     	; 0x6be <READ_sensor+0x2a0>
 68a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 68e:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 692:	85 3c       	cpi	r24, 0xC5	; 197
 694:	99 40       	sbci	r25, 0x09	; 9
 696:	9c f0       	brlt	.+38     	; 0x6be <READ_sensor+0x2a0>
 698:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 69c:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 6a0:	85 3c       	cpi	r24, 0xC5	; 197
 6a2:	99 40       	sbci	r25, 0x09	; 9
 6a4:	64 f0       	brlt	.+24     	; 0x6be <READ_sensor+0x2a0>
	{
		LCD_voidSendCMD8Bit(0X85);
 6a6:	85 e8       	ldi	r24, 0x85	; 133
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		LCD_voidWriteString("GOOD JOB!");
 6ae:	85 ea       	ldi	r24, 0xA5	; 165
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		
	}
	
	 //I WISH YOU A HAPPY LIFE
	 if ((u16Analog_Val[0]<1200)&&(u16Analog_Val[1]<1200)&&(u16Analog_Val[2]<1200)&&(u16Analog_Val[3]<1200)&&(u16Analog_Val[4]<1200))
 6be:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <u16Analog_Val>
 6c2:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <u16Analog_Val+0x1>
 6c6:	80 3b       	cpi	r24, 0xB0	; 176
 6c8:	94 40       	sbci	r25, 0x04	; 4
 6ca:	84 f5       	brge	.+96     	; 0x72c <READ_sensor+0x30e>
 6cc:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <u16Analog_Val+0x2>
 6d0:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <u16Analog_Val+0x3>
 6d4:	80 3b       	cpi	r24, 0xB0	; 176
 6d6:	94 40       	sbci	r25, 0x04	; 4
 6d8:	4c f5       	brge	.+82     	; 0x72c <READ_sensor+0x30e>
 6da:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16Analog_Val+0x4>
 6de:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16Analog_Val+0x5>
 6e2:	80 3b       	cpi	r24, 0xB0	; 176
 6e4:	94 40       	sbci	r25, 0x04	; 4
 6e6:	14 f5       	brge	.+68     	; 0x72c <READ_sensor+0x30e>
 6e8:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16Analog_Val+0x6>
 6ec:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16Analog_Val+0x7>
 6f0:	80 3b       	cpi	r24, 0xB0	; 176
 6f2:	94 40       	sbci	r25, 0x04	; 4
 6f4:	dc f4       	brge	.+54     	; 0x72c <READ_sensor+0x30e>
 6f6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u16Analog_Val+0x8>
 6fa:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <u16Analog_Val+0x9>
 6fe:	80 3b       	cpi	r24, 0xB0	; 176
 700:	94 40       	sbci	r25, 0x04	; 4
 702:	a4 f4       	brge	.+40     	; 0x72c <READ_sensor+0x30e>
	 {
		 LCD_voidSendCMD8Bit(0X80);
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		 LCD_voidWriteString("I WISH YOU");
 70c:	8f ea       	ldi	r24, 0xAF	; 175
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0XC0);
 714:	80 ec       	ldi	r24, 0xC0	; 192
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		 LCD_voidWriteString("A HAPPY LIFE");
 71c:	8a eb       	ldi	r24, 0xBA	; 186
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteString>
		 LCD_voidSendCMD8Bit(0X01);
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 98 01 	call	0x330	; 0x330 <LCD_voidSendCMD8Bit>
		 
		 
	 }
	 
	}
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <__usmulhisi3>:
 732:	0e 94 a0 03 	call	0x740	; 0x740 <__umulhisi3>

00000736 <__usmulhisi3_tail>:
 736:	b7 ff       	sbrs	r27, 7
 738:	08 95       	ret
 73a:	82 1b       	sub	r24, r18
 73c:	93 0b       	sbc	r25, r19
 73e:	08 95       	ret

00000740 <__umulhisi3>:
 740:	a2 9f       	mul	r26, r18
 742:	b0 01       	movw	r22, r0
 744:	b3 9f       	mul	r27, r19
 746:	c0 01       	movw	r24, r0
 748:	a3 9f       	mul	r26, r19
 74a:	70 0d       	add	r23, r0
 74c:	81 1d       	adc	r24, r1
 74e:	11 24       	eor	r1, r1
 750:	91 1d       	adc	r25, r1
 752:	b2 9f       	mul	r27, r18
 754:	70 0d       	add	r23, r0
 756:	81 1d       	adc	r24, r1
 758:	11 24       	eor	r1, r1
 75a:	91 1d       	adc	r25, r1
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
